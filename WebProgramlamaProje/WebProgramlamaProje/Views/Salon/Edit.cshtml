@model WebProgramlamaProje.Models.Salon

<h2>Salon Düzenle</h2>
<style>
    /* Genel Gövde */
    body {
        font-family: 'Roboto', Arial, sans-serif; /* Modern yazı tipi */
        background-color: #1e1e1e; /* Koyu gri arka plan */
        color: #ffffff; /* Beyaz yazı */
        margin: 0;
        padding: 20px;
    }

    .container {
        margin-top: 40px;
        padding: 30px;
        border-radius: 10px; /* Köşeleri yuvarlatma */
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); /* Hafif gölge */
        background-color: #1e1e1e; /* Koyu gri arka plan */
        color: white; /* Yazı rengini açık yap */
        border: 1px solid rgba(255, 255, 255, 0.2); /* Hafif beyaz kenarlık */
    }

    /* Başlıklar */
    h2, h4 {
        color: #FFD700; /* Altın sarısı */
        text-align: center;
        margin-bottom: 20px;
        text-shadow: 1px 1px 3px rgba(0, 0, 0, 0.5); /* Hafif gölge */
    }

    /* Formlar */
    form {
        background-color: #2c2c2c; /* Daha koyu arka plan */
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.5); /* Hafif gölge */
        margin-bottom: 30px;
    }

    /* Form Grupları */
    .form-group {
        margin-bottom: 20px;
    }

    label {
        display: block;
        font-weight: bold;
        color: #FFD700; /* Altın sarısı */
        margin-bottom: 5px;
    }

    input, select {
        width: 100%;
        padding: 10px;
        margin-top: 5px;
        margin-bottom: 10px;
        border: 1px solid #FFD700; /* Altın sarısı kenarlık */
        border-radius: 5px;
        background-color: #333333; /* Koyu arka plan */
        color: #ffffff; /* Beyaz yazı */
        font-size: 14px;
    }

        input::placeholder {
            color: #b3b3b3; /* Placeholder için açık gri */
        }

    /* Butonlar */
    button, .btn {
        padding: 10px 20px;
        border-radius: 5px;
        font-size: 14px;
        font-weight: bold;
        cursor: pointer;
        transition: all 0.3s ease-in-out;
        border: none;
    }

    /* Farklı Buton Stilleri */
    .btn-primary {
        background-color: #007bff;
        color: white;
    }

        .btn-primary:hover {
            background-color: #0056b3;
        }

    .btn-success {
        background-color: #28a745;
        color: white;
    }

        .btn-success:hover {
            background-color: #218838;
        }

    .btn-secondary {
        background-color: #6c757d;
        color: white;
    }

        .btn-secondary:hover {
            background-color: #5a6268;
        }

    .btn-danger {
        background-color: #dc3545;
        color: white;
    }

        .btn-danger:hover {
            background-color: #bd2130;
        }

    /* Modal */
    .modal-content {
        background-color: #333333; /* Koyu arka plan */
        color: white;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.5);
    }

    .modal-header {
        border-bottom: 1px solid #FFD700; /* Altın sarısı */
    }

    .modal-title {
        color: #FFD700; /* Altın sarısı */
    }

    .modal-footer .btn-secondary {
        background-color: #6c757d;
        color: white;
    }

    .modal-footer .btn-danger {
        background-color: #dc3545;
        color: white;
    }

    /* Tablo */
    table {
        width: 100%;
        border-collapse: collapse;
        margin-bottom: 20px;
        background-color: #2c2c2c; /* Tablo arka plan */
    }

        table th, table td {
            padding: 12px;
            text-align: left;
            border: 1px solid #444; /* Koyu gri kenarlık */
        }

        table th {
            background-color: #343a40; /* Koyu gri */
            color: #FFD700; /* Altın sarısı yazı */
            font-weight: bold;
        }

        table td {
            color: #ffffff; /* Beyaz yazı */
        }

        /* Hover Efekti */
        table tr:hover {
            background-color: #444444; /* Hafif koyu gri */
        }

</style>
<!-- Validation summary: Tüm hata mesajlarını burada göster -->
<div asp-validation-summary="All" class="text-danger"></div>

<form asp-action="Edit" method="post">
    <!-- Salon ID -->
    <div class="form-group">
        <label for="Id">Salon ID:</label>
        <input asp-for="Id" class="form-control" readonly />
        <span asp-validation-for="Id" class="text-danger"></span>
    </div>

    <!-- Salon Adı -->
    <div class="form-group">
        <label for="Name">Salon Adı:</label>
        <input asp-for="Name" class="form-control" />
        <span asp-validation-for="Name" class="text-danger"></span>
    </div>

    <!-- Adres -->
    <div class="form-group">
        <label for="Address">Adres:</label>
        <input asp-for="Address" class="form-control" />
        <span asp-validation-for="Address" class="text-danger"></span>
    </div>

    <!-- Telefon -->
    <div class="form-group">
        <label for="Phone">Telefon Numarası:</label>
        <input asp-for="Phone" class="form-control" />
        <span asp-validation-for="Phone" class="text-danger"></span>
    </div>

    <h4>Hizmetler</h4>
    <div id="services">
        @if (Model.Services != null && Model.Services.Any())
        {
            @for (var i = 0; i < Model.Services.Count; i++)
            {
                <div class="form-group service-item">
                    <input type="hidden" name="Services[@i].Id" value="@Model.Services[i].Id" />

                    <label for="ServiceName">Hizmet Adı:</label>
                    <input name="Services[@i].Name" class="form-control" value="@Model.Services[i].Name" readonly />

                    <label for="ServicePrice">Fiyat:</label>
                    <input name="Services[@i].Price" class="form-control" type="number" step="0.01" value="@Model.Services[i].Price" />

                    <label for="ServiceDuration">Süre (dk):</label>
                    <input name="Services[@i].Duration" class="form-control" type="number" value="@Model.Services[i].Duration" />

                    <!-- Hizmet Sil Butonu -->
                    <button type="button" class="btn btn-danger mt-2 remove-service-btn" data-service-id="@Model.Services[i].Id">
                        Hizmeti Sil
                    </button>
                </div>
            }
        }
        }
    </div>

    <button type="button" id="addService" class="btn btn-success mb-3">+ Yeni Hizmet Ekle</button>

    <h4>Çalışanlar</h4>
    <div id="employees">
        @if (Model.Employees != null && Model.Employees.Any())
        {
            @for (var i = 0; i < Model.Employees.Count; i++)
            {
                <div class="form-group employee-item">
                    <!-- Çalışan ID -->
                    <input type="hidden" name="Employees[@i].Id" value="@Model.Employees[i].Id" />

                    <!-- Çalışan Adı -->
                    <label for="Employees[@i].Name">Çalışan Adı:</label>
                    <input name="Employees[@i].Name" class="form-control" value="@Model.Employees[i].Name" />

                    <!-- Uzmanlık -->
                    <label>Uzmanlık:</label>
                    <div id="specialties-@i">
                        @foreach (var specialty in Model.Employees[i].Specialty)
                        {
                            <input name="Employees[@i].Specialty[]" class="form-control mb-2" value="@specialty" />
                        }
                    </div>
                    <button type="button" class="btn btn-secondary mt-2" onclick="addSpecialty(@i)">Uzmanlık Ekle</button>

                    <!-- Yapabildiği İşler -->
                    <label>Yapabildiği İşler:</label>
                    <div id="skills-@i">
                        @foreach (var skill in Model.Employees[i].Skills)
                        {
                            <input name="Employees[@i].Skills[]" class="form-control mb-2" value="@skill" />
                        }
                    </div>
                    <button type="button" class="btn btn-secondary mt-2" onclick="addSkill(@i)">Yapabildiği İş Ekle</button>

                    <!-- Çalışan Sil Butonu -->
                    <button type="button" class="btn btn-danger mt-2 remove-employee-btn" data-employee-id="@Model.Employees[i].Id">
                        Çalışanı Sil
                    </button>
                </div>
            }
        }
    </div>


    <!-- Yeni Çalışan Ekle Butonu -->
    <button type="button" id="addEmployee" class="btn btn-success mb-3">+ Yeni Çalışan Ekle</button>
   
    
    
    <h4>Randevular</h4>
    <div id="appointments">
        @if (Model.Appointments != null && Model.Appointments.Any())
        {
            @for (var i = 0; i < Model.Appointments.Count; i++)
            {
                <div class="form-group appointment-item">
                    <!-- Randevu ID -->
                    <input type="hidden" name="Appointments[@i].Id" value="@Model.Appointments[i].Id" />

                    <!-- Randevu Tarihi -->
                    <label for="Appointments[@i].Date">Randevu Tarihi:</label>
                    <input name="Appointments[@i].Date" class="form-control" value="@Model.Appointments[i].Date.ToString("yyyy-MM-dd HH:mm")" readonly />

                    <!-- Hizmet Adı -->
                    <label for="Appointments[@i].Service">Hizmet:</label>
                    <input name="Appointments[@i].Service" class="form-control" value="@Model.Appointments[i].Service.Name" readonly />

                    <!-- Çalışan Adı -->
                    <label for="Appointments[@i].Employee">Çalışan:</label>
                    <input name="Appointments[@i].Employee" class="form-control" value="@Model.Appointments[i].Employee.Name" readonly />

                    <!-- Randevu Sil Butonu -->
                    <button type="button" class="btn btn-danger mt-2 remove-appointment-btn" data-appointment-id="@Model.Appointments[i].Id">
                        Randevuyu Sil
                    </button>
                </div>
            }
        }
    </div>



    <!-- Kaydet ve İptal Butonları -->
    <button type="submit" class="btn btn-primary mt-3">Kaydet</button>
    <a asp-action="Index" class="btn btn-secondary mt-3">İptal</a>
</form>

@section Scripts {
    <script>
        let serviceIndex = @Model.Services.Count;
        let employeeIndex = @Model.Employees.Count;

        // Yeni Hizmet Ekleme
        document.getElementById("addService").addEventListener("click", function () {
            const servicesDiv = document.getElementById("services");

            // Yeni hizmet için HTML
            const newService = `
                                        <div class="form-group">
                                                    <input type="hidden" name="Services[${serviceIndex}].Id" value="0" />
                                            <label for="Services[${serviceIndex}].Name">Hizmet Adı:</label>
                                            <input name="Services[${serviceIndex}].Name" class="form-control" placeholder="Hizmet Adı" />

                                            <label for="Services[${serviceIndex}].Price">Fiyat:</label>
                                            <input name="Services[${serviceIndex}].Price" class="form-control" type="number" step="0.01" placeholder="Fiyat" />

                                            <label for="Services[${serviceIndex}].Duration">Süre (dk):</label>
                                            <input name="Services[${serviceIndex}].Duration" class="form-control" type="number" placeholder="Süre" />
                                        </div>
                                    `;

            // Yeni hizmeti ekle
            servicesDiv.insertAdjacentHTML("beforeend", newService);
            serviceIndex++;
        });


        // Yeni Çalışan Ekleme
        document.getElementById("addEmployee").addEventListener("click", function () {
            const employeesDiv = document.getElementById("employees");

            const employeeField = `
                                <div class="form-group employee-item">
                                    <!-- Çalışan ID -->
                                    <input type="hidden" name="Employees[${employeeIndex}].Id" value="0" />

                                    <!-- Çalışan Adı -->
                                    <label for="Employees[${employeeIndex}].Name">Çalışan Adı:</label>
                                    <input name="Employees[${employeeIndex}].Name" class="form-control" placeholder="Çalışan Adı" />

                                    <!-- Uzmanlık -->
                                    <label>Uzmanlık:</label>
                                    <div id="specialties-${employeeIndex}">
                                        <input name="Employees[${employeeIndex}].Specialty[]" class="form-control mb-2" placeholder="Uzmanlık Ekle" />
                                    </div>
                                    <button type="button" class="btn btn-secondary mt-2" onclick="addSpecialty(${employeeIndex})">Uzmanlık Ekle</button>

                                    <!-- Yapabildiği İşler -->
                                    <label>Yapabildiği İşler:</label>
                                    <div id="skills-${employeeIndex}">
                                        <input name="Employees[${employeeIndex}].Skills[]" class="form-control mb-2" placeholder="Yapabildiği İş Ekle" />
                                    </div>
                                    <button type="button" class="btn btn-secondary mt-2" onclick="addSkill(${employeeIndex})">Yapabildiği İş Ekle</button>

                                    <!-- Çalışan Sil Butonu -->
                                    <button type="button" class="btn btn-danger mt-2 remove-employee-btn">Çalışanı Sil</button>
                                </div>
                            `;

            employeesDiv.insertAdjacentHTML("beforeend", employeeField);
            employeeIndex++;
        });

        // Uzmanlık Ekleme
        function addSpecialty(employeeIndex) {
            const specialtiesDiv = document.getElementById(`specialties-${employeeIndex}`);
            specialtiesDiv.insertAdjacentHTML("beforeend", `<input name="Employees[${employeeIndex}].Specialty[]" class="form-control mb-2" placeholder="Uzmanlık Ekle" />`);
        }

        // Yapabildiği İş Ekleme
        function addSkill(employeeIndex) {
            const skillsDiv = document.getElementById(`skills-${employeeIndex}`);
            skillsDiv.insertAdjacentHTML("beforeend", `<input name="Employees[${employeeIndex}].Skills[]" class="form-control mb-2" placeholder="Yapabildiği İş Ekle" />`);
        }

        // Çalışan Silme İşlemi
        document.addEventListener("click", function (e) {
            if (e.target && e.target.classList.contains("remove-employee-btn")) {
                const employeeId = e.target.getAttribute("data-employee-id");

                // Çalışan silme onayı
                if (confirm("Bu çalışanı silmek istediğinize emin misiniz?")) {
                    // Backend'e silme isteği gönder
                    fetch('/Salon/DeleteEmployee', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(employeeId)
                    })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                // HTML'den çalışan elemanını kaldır
                                const employeeDiv = e.target.closest(".employee-item");
                                if (employeeDiv) {
                                    employeeDiv.remove();
                                }
                                alert(data.message);
                            } else {
                                alert(data.message);
                            }
                        })
                        .catch(error => console.error('Hata:', error));
                }
            }
        });




        document.addEventListener("click", function (e) {
            if (e.target && e.target.classList.contains("remove-service-btn")) {
                const serviceId = e.target.getAttribute("data-service-id");

                // Onay mesajı
                if (confirm("Bu hizmeti silmek istediğinize emin misiniz?")) {
                    // Backend'e silme isteği gönder
                    fetch('/Salon/DeleteService', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(serviceId)
                    })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                // HTML'den hizmeti kaldır
                                const serviceDiv = e.target.closest(".service-item");
                                if (serviceDiv) {
                                    serviceDiv.remove();
                                }
                                alert(data.message);
                            } else {
                                alert(data.message);
                            }
                        })
                        .catch(error => console.error('Hata:', error));
                }
            }
        });

        document.addEventListener("click", function (e) {
            if (e.target && e.target.classList.contains("remove-appointment-btn")) {
                const appointmentId = e.target.getAttribute("data-appointment-id");

                // Onay mesajı
                if (confirm("Bu hizmeti silmek istediğinize emin misiniz?")) {
                    // Backend'e silme isteği gönder
                    fetch('/Salon/DeleteAppointment', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(appointmentId)
                    })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                // HTML'den hizmeti kaldır
                                const appointmentDiv = e.target.closest(".appointment-item");
                                if (appointmentId) {
                                    appointmentDiv.remove();
                                }
                                alert(data.message);
                            } else {
                                alert(data.message);
                            }
                        })
                        .catch(error => console.error('Hata:', error));
                }
            }
        });






    </script>
}